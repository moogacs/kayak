// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/transport/v1/transport.proto

package transportv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kayak/gen/proto/transport/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// RaftTransportName is the fully-qualified name of the RaftTransport service.
	RaftTransportName = "proto.transport.v1.RaftTransport"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaftTransportAppendEntriesPipelineProcedure is the fully-qualified name of the RaftTransport's
	// AppendEntriesPipeline RPC.
	RaftTransportAppendEntriesPipelineProcedure = "/proto.transport.v1.RaftTransport/AppendEntriesPipeline"
	// RaftTransportAppendEntriesProcedure is the fully-qualified name of the RaftTransport's
	// AppendEntries RPC.
	RaftTransportAppendEntriesProcedure = "/proto.transport.v1.RaftTransport/AppendEntries"
	// RaftTransportRequestVoteProcedure is the fully-qualified name of the RaftTransport's RequestVote
	// RPC.
	RaftTransportRequestVoteProcedure = "/proto.transport.v1.RaftTransport/RequestVote"
	// RaftTransportTimeoutNowProcedure is the fully-qualified name of the RaftTransport's TimeoutNow
	// RPC.
	RaftTransportTimeoutNowProcedure = "/proto.transport.v1.RaftTransport/TimeoutNow"
	// RaftTransportInstallSnapshotProcedure is the fully-qualified name of the RaftTransport's
	// InstallSnapshot RPC.
	RaftTransportInstallSnapshotProcedure = "/proto.transport.v1.RaftTransport/InstallSnapshot"
)

// RaftTransportClient is a client for the proto.transport.v1.RaftTransport service.
type RaftTransportClient interface {
	// AppendEntriesPipeline opens an AppendEntries message stream.
	AppendEntriesPipeline(context.Context) *connect.BidiStreamForClient[v1.AppendEntriesRequest, v1.AppendEntriesResponse]
	// AppendEntries performs a single append entries request / response.
	AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error)
	// RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
	RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error)
	// TimeoutNow is used to start a leadership transfer to the target node.
	TimeoutNow(context.Context, *connect.Request[v1.TimeoutNowRequest]) (*connect.Response[v1.TimeoutNowResponse], error)
	// InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
	InstallSnapshot(context.Context) *connect.ClientStreamForClient[v1.InstallSnapshotRequest, v1.InstallSnapshotResponse]
}

// NewRaftTransportClient constructs a client for the proto.transport.v1.RaftTransport service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaftTransportClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaftTransportClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raftTransportClient{
		appendEntriesPipeline: connect.NewClient[v1.AppendEntriesRequest, v1.AppendEntriesResponse](
			httpClient,
			baseURL+RaftTransportAppendEntriesPipelineProcedure,
			opts...,
		),
		appendEntries: connect.NewClient[v1.AppendEntriesRequest, v1.AppendEntriesResponse](
			httpClient,
			baseURL+RaftTransportAppendEntriesProcedure,
			opts...,
		),
		requestVote: connect.NewClient[v1.RequestVoteRequest, v1.RequestVoteResponse](
			httpClient,
			baseURL+RaftTransportRequestVoteProcedure,
			opts...,
		),
		timeoutNow: connect.NewClient[v1.TimeoutNowRequest, v1.TimeoutNowResponse](
			httpClient,
			baseURL+RaftTransportTimeoutNowProcedure,
			opts...,
		),
		installSnapshot: connect.NewClient[v1.InstallSnapshotRequest, v1.InstallSnapshotResponse](
			httpClient,
			baseURL+RaftTransportInstallSnapshotProcedure,
			opts...,
		),
	}
}

// raftTransportClient implements RaftTransportClient.
type raftTransportClient struct {
	appendEntriesPipeline *connect.Client[v1.AppendEntriesRequest, v1.AppendEntriesResponse]
	appendEntries         *connect.Client[v1.AppendEntriesRequest, v1.AppendEntriesResponse]
	requestVote           *connect.Client[v1.RequestVoteRequest, v1.RequestVoteResponse]
	timeoutNow            *connect.Client[v1.TimeoutNowRequest, v1.TimeoutNowResponse]
	installSnapshot       *connect.Client[v1.InstallSnapshotRequest, v1.InstallSnapshotResponse]
}

// AppendEntriesPipeline calls proto.transport.v1.RaftTransport.AppendEntriesPipeline.
func (c *raftTransportClient) AppendEntriesPipeline(ctx context.Context) *connect.BidiStreamForClient[v1.AppendEntriesRequest, v1.AppendEntriesResponse] {
	return c.appendEntriesPipeline.CallBidiStream(ctx)
}

// AppendEntries calls proto.transport.v1.RaftTransport.AppendEntries.
func (c *raftTransportClient) AppendEntries(ctx context.Context, req *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error) {
	return c.appendEntries.CallUnary(ctx, req)
}

// RequestVote calls proto.transport.v1.RaftTransport.RequestVote.
func (c *raftTransportClient) RequestVote(ctx context.Context, req *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error) {
	return c.requestVote.CallUnary(ctx, req)
}

// TimeoutNow calls proto.transport.v1.RaftTransport.TimeoutNow.
func (c *raftTransportClient) TimeoutNow(ctx context.Context, req *connect.Request[v1.TimeoutNowRequest]) (*connect.Response[v1.TimeoutNowResponse], error) {
	return c.timeoutNow.CallUnary(ctx, req)
}

// InstallSnapshot calls proto.transport.v1.RaftTransport.InstallSnapshot.
func (c *raftTransportClient) InstallSnapshot(ctx context.Context) *connect.ClientStreamForClient[v1.InstallSnapshotRequest, v1.InstallSnapshotResponse] {
	return c.installSnapshot.CallClientStream(ctx)
}

// RaftTransportHandler is an implementation of the proto.transport.v1.RaftTransport service.
type RaftTransportHandler interface {
	// AppendEntriesPipeline opens an AppendEntries message stream.
	AppendEntriesPipeline(context.Context, *connect.BidiStream[v1.AppendEntriesRequest, v1.AppendEntriesResponse]) error
	// AppendEntries performs a single append entries request / response.
	AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error)
	// RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
	RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error)
	// TimeoutNow is used to start a leadership transfer to the target node.
	TimeoutNow(context.Context, *connect.Request[v1.TimeoutNowRequest]) (*connect.Response[v1.TimeoutNowResponse], error)
	// InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
	InstallSnapshot(context.Context, *connect.ClientStream[v1.InstallSnapshotRequest]) (*connect.Response[v1.InstallSnapshotResponse], error)
}

// NewRaftTransportHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaftTransportHandler(svc RaftTransportHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raftTransportAppendEntriesPipelineHandler := connect.NewBidiStreamHandler(
		RaftTransportAppendEntriesPipelineProcedure,
		svc.AppendEntriesPipeline,
		opts...,
	)
	raftTransportAppendEntriesHandler := connect.NewUnaryHandler(
		RaftTransportAppendEntriesProcedure,
		svc.AppendEntries,
		opts...,
	)
	raftTransportRequestVoteHandler := connect.NewUnaryHandler(
		RaftTransportRequestVoteProcedure,
		svc.RequestVote,
		opts...,
	)
	raftTransportTimeoutNowHandler := connect.NewUnaryHandler(
		RaftTransportTimeoutNowProcedure,
		svc.TimeoutNow,
		opts...,
	)
	raftTransportInstallSnapshotHandler := connect.NewClientStreamHandler(
		RaftTransportInstallSnapshotProcedure,
		svc.InstallSnapshot,
		opts...,
	)
	return "/proto.transport.v1.RaftTransport/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaftTransportAppendEntriesPipelineProcedure:
			raftTransportAppendEntriesPipelineHandler.ServeHTTP(w, r)
		case RaftTransportAppendEntriesProcedure:
			raftTransportAppendEntriesHandler.ServeHTTP(w, r)
		case RaftTransportRequestVoteProcedure:
			raftTransportRequestVoteHandler.ServeHTTP(w, r)
		case RaftTransportTimeoutNowProcedure:
			raftTransportTimeoutNowHandler.ServeHTTP(w, r)
		case RaftTransportInstallSnapshotProcedure:
			raftTransportInstallSnapshotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaftTransportHandler returns CodeUnimplemented from all methods.
type UnimplementedRaftTransportHandler struct{}

func (UnimplementedRaftTransportHandler) AppendEntriesPipeline(context.Context, *connect.BidiStream[v1.AppendEntriesRequest, v1.AppendEntriesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.transport.v1.RaftTransport.AppendEntriesPipeline is not implemented"))
}

func (UnimplementedRaftTransportHandler) AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.transport.v1.RaftTransport.AppendEntries is not implemented"))
}

func (UnimplementedRaftTransportHandler) RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.transport.v1.RaftTransport.RequestVote is not implemented"))
}

func (UnimplementedRaftTransportHandler) TimeoutNow(context.Context, *connect.Request[v1.TimeoutNowRequest]) (*connect.Response[v1.TimeoutNowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.transport.v1.RaftTransport.TimeoutNow is not implemented"))
}

func (UnimplementedRaftTransportHandler) InstallSnapshot(context.Context, *connect.ClientStream[v1.InstallSnapshotRequest]) (*connect.Response[v1.InstallSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.transport.v1.RaftTransport.InstallSnapshot is not implemented"))
}
