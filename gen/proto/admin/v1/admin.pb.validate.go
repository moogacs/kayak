// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/admin/v1/admin.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Future with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Future) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Future with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FutureMultiError, or nil if none found.
func (m *Future) ValidateAll() error {
	return m.validate(true)
}

func (m *Future) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationToken

	if len(errors) > 0 {
		return FutureMultiError(errors)
	}

	return nil
}

// FutureMultiError is an error wrapping multiple validation errors returned by
// Future.ValidateAll() if the designated constraints aren't met.
type FutureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FutureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FutureMultiError) AllErrors() []error { return m }

// FutureValidationError is the validation error returned by Future.Validate if
// the designated constraints aren't met.
type FutureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FutureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FutureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FutureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FutureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FutureValidationError) ErrorName() string { return "FutureValidationError" }

// Error satisfies the builtin error interface
func (e FutureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFuture.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FutureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FutureValidationError{}

// Validate checks the field values on AwaitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AwaitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwaitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AwaitResponseMultiError, or
// nil if none found.
func (m *AwaitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AwaitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	// no validation rules for Index

	if len(errors) > 0 {
		return AwaitResponseMultiError(errors)
	}

	return nil
}

// AwaitResponseMultiError is an error wrapping multiple validation errors
// returned by AwaitResponse.ValidateAll() if the designated constraints
// aren't met.
type AwaitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwaitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwaitResponseMultiError) AllErrors() []error { return m }

// AwaitResponseValidationError is the validation error returned by
// AwaitResponse.Validate if the designated constraints aren't met.
type AwaitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwaitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwaitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwaitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwaitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwaitResponseValidationError) ErrorName() string { return "AwaitResponseValidationError" }

// Error satisfies the builtin error interface
func (e AwaitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwaitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwaitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwaitResponseValidationError{}

// Validate checks the field values on ForgetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForgetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForgetResponseMultiError,
// or nil if none found.
func (m *ForgetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ForgetResponseMultiError(errors)
	}

	return nil
}

// ForgetResponseMultiError is an error wrapping multiple validation errors
// returned by ForgetResponse.ValidateAll() if the designated constraints
// aren't met.
type ForgetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgetResponseMultiError) AllErrors() []error { return m }

// ForgetResponseValidationError is the validation error returned by
// ForgetResponse.Validate if the designated constraints aren't met.
type ForgetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetResponseValidationError) ErrorName() string { return "ForgetResponseValidationError" }

// Error satisfies the builtin error interface
func (e ForgetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetResponseValidationError{}

// Validate checks the field values on AddVoterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddVoterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVoterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVoterRequestMultiError, or nil if none found.
func (m *AddVoterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVoterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for PreviousIndex

	if len(errors) > 0 {
		return AddVoterRequestMultiError(errors)
	}

	return nil
}

// AddVoterRequestMultiError is an error wrapping multiple validation errors
// returned by AddVoterRequest.ValidateAll() if the designated constraints
// aren't met.
type AddVoterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVoterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVoterRequestMultiError) AllErrors() []error { return m }

// AddVoterRequestValidationError is the validation error returned by
// AddVoterRequest.Validate if the designated constraints aren't met.
type AddVoterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVoterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVoterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVoterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVoterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVoterRequestValidationError) ErrorName() string { return "AddVoterRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddVoterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVoterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVoterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVoterRequestValidationError{}

// Validate checks the field values on AddNonvoterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNonvoterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNonvoterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNonvoterRequestMultiError, or nil if none found.
func (m *AddNonvoterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNonvoterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for PreviousIndex

	if len(errors) > 0 {
		return AddNonvoterRequestMultiError(errors)
	}

	return nil
}

// AddNonvoterRequestMultiError is an error wrapping multiple validation errors
// returned by AddNonvoterRequest.ValidateAll() if the designated constraints
// aren't met.
type AddNonvoterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNonvoterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNonvoterRequestMultiError) AllErrors() []error { return m }

// AddNonvoterRequestValidationError is the validation error returned by
// AddNonvoterRequest.Validate if the designated constraints aren't met.
type AddNonvoterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNonvoterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNonvoterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNonvoterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNonvoterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNonvoterRequestValidationError) ErrorName() string {
	return "AddNonvoterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddNonvoterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNonvoterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNonvoterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNonvoterRequestValidationError{}

// Validate checks the field values on AppliedIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppliedIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppliedIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppliedIndexRequestMultiError, or nil if none found.
func (m *AppliedIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppliedIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AppliedIndexRequestMultiError(errors)
	}

	return nil
}

// AppliedIndexRequestMultiError is an error wrapping multiple validation
// errors returned by AppliedIndexRequest.ValidateAll() if the designated
// constraints aren't met.
type AppliedIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppliedIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppliedIndexRequestMultiError) AllErrors() []error { return m }

// AppliedIndexRequestValidationError is the validation error returned by
// AppliedIndexRequest.Validate if the designated constraints aren't met.
type AppliedIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppliedIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppliedIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppliedIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppliedIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppliedIndexRequestValidationError) ErrorName() string {
	return "AppliedIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppliedIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppliedIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppliedIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppliedIndexRequestValidationError{}

// Validate checks the field values on AppliedIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppliedIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppliedIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppliedIndexResponseMultiError, or nil if none found.
func (m *AppliedIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppliedIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	if len(errors) > 0 {
		return AppliedIndexResponseMultiError(errors)
	}

	return nil
}

// AppliedIndexResponseMultiError is an error wrapping multiple validation
// errors returned by AppliedIndexResponse.ValidateAll() if the designated
// constraints aren't met.
type AppliedIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppliedIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppliedIndexResponseMultiError) AllErrors() []error { return m }

// AppliedIndexResponseValidationError is the validation error returned by
// AppliedIndexResponse.Validate if the designated constraints aren't met.
type AppliedIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppliedIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppliedIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppliedIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppliedIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppliedIndexResponseValidationError) ErrorName() string {
	return "AppliedIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppliedIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppliedIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppliedIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppliedIndexResponseValidationError{}

// Validate checks the field values on DemoteVoterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DemoteVoterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DemoteVoterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DemoteVoterRequestMultiError, or nil if none found.
func (m *DemoteVoterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DemoteVoterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PreviousIndex

	if len(errors) > 0 {
		return DemoteVoterRequestMultiError(errors)
	}

	return nil
}

// DemoteVoterRequestMultiError is an error wrapping multiple validation errors
// returned by DemoteVoterRequest.ValidateAll() if the designated constraints
// aren't met.
type DemoteVoterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DemoteVoterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DemoteVoterRequestMultiError) AllErrors() []error { return m }

// DemoteVoterRequestValidationError is the validation error returned by
// DemoteVoterRequest.Validate if the designated constraints aren't met.
type DemoteVoterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DemoteVoterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DemoteVoterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DemoteVoterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DemoteVoterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DemoteVoterRequestValidationError) ErrorName() string {
	return "DemoteVoterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DemoteVoterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDemoteVoterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DemoteVoterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DemoteVoterRequestValidationError{}

// Validate checks the field values on GetConfigurationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigurationRequestMultiError, or nil if none found.
func (m *GetConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConfigurationRequestMultiError(errors)
	}

	return nil
}

// GetConfigurationRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationRequestMultiError) AllErrors() []error { return m }

// GetConfigurationRequestValidationError is the validation error returned by
// GetConfigurationRequest.Validate if the designated constraints aren't met.
type GetConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationRequestValidationError) ErrorName() string {
	return "GetConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationRequestValidationError{}

// Validate checks the field values on GetConfigurationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigurationResponseMultiError, or nil if none found.
func (m *GetConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConfigurationResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConfigurationResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConfigurationResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConfigurationResponseMultiError(errors)
	}

	return nil
}

// GetConfigurationResponseMultiError is an error wrapping multiple validation
// errors returned by GetConfigurationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationResponseMultiError) AllErrors() []error { return m }

// GetConfigurationResponseValidationError is the validation error returned by
// GetConfigurationResponse.Validate if the designated constraints aren't met.
type GetConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationResponseValidationError) ErrorName() string {
	return "GetConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationResponseValidationError{}

// Validate checks the field values on LastContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LastContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LastContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LastContactRequestMultiError, or nil if none found.
func (m *LastContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LastContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LastContactRequestMultiError(errors)
	}

	return nil
}

// LastContactRequestMultiError is an error wrapping multiple validation errors
// returned by LastContactRequest.ValidateAll() if the designated constraints
// aren't met.
type LastContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LastContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LastContactRequestMultiError) AllErrors() []error { return m }

// LastContactRequestValidationError is the validation error returned by
// LastContactRequest.Validate if the designated constraints aren't met.
type LastContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LastContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LastContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LastContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LastContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LastContactRequestValidationError) ErrorName() string {
	return "LastContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LastContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLastContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LastContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LastContactRequestValidationError{}

// Validate checks the field values on LastContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LastContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LastContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LastContactResponseMultiError, or nil if none found.
func (m *LastContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LastContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnixNano

	if len(errors) > 0 {
		return LastContactResponseMultiError(errors)
	}

	return nil
}

// LastContactResponseMultiError is an error wrapping multiple validation
// errors returned by LastContactResponse.ValidateAll() if the designated
// constraints aren't met.
type LastContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LastContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LastContactResponseMultiError) AllErrors() []error { return m }

// LastContactResponseValidationError is the validation error returned by
// LastContactResponse.Validate if the designated constraints aren't met.
type LastContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LastContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LastContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LastContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LastContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LastContactResponseValidationError) ErrorName() string {
	return "LastContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LastContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLastContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LastContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LastContactResponseValidationError{}

// Validate checks the field values on LastIndexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LastIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LastIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LastIndexRequestMultiError, or nil if none found.
func (m *LastIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LastIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LastIndexRequestMultiError(errors)
	}

	return nil
}

// LastIndexRequestMultiError is an error wrapping multiple validation errors
// returned by LastIndexRequest.ValidateAll() if the designated constraints
// aren't met.
type LastIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LastIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LastIndexRequestMultiError) AllErrors() []error { return m }

// LastIndexRequestValidationError is the validation error returned by
// LastIndexRequest.Validate if the designated constraints aren't met.
type LastIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LastIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LastIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LastIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LastIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LastIndexRequestValidationError) ErrorName() string { return "LastIndexRequestValidationError" }

// Error satisfies the builtin error interface
func (e LastIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLastIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LastIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LastIndexRequestValidationError{}

// Validate checks the field values on LastIndexResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LastIndexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LastIndexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LastIndexResponseMultiError, or nil if none found.
func (m *LastIndexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LastIndexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	if len(errors) > 0 {
		return LastIndexResponseMultiError(errors)
	}

	return nil
}

// LastIndexResponseMultiError is an error wrapping multiple validation errors
// returned by LastIndexResponse.ValidateAll() if the designated constraints
// aren't met.
type LastIndexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LastIndexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LastIndexResponseMultiError) AllErrors() []error { return m }

// LastIndexResponseValidationError is the validation error returned by
// LastIndexResponse.Validate if the designated constraints aren't met.
type LastIndexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LastIndexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LastIndexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LastIndexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LastIndexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LastIndexResponseValidationError) ErrorName() string {
	return "LastIndexResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LastIndexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLastIndexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LastIndexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LastIndexResponseValidationError{}

// Validate checks the field values on LeaderRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeaderRequestMultiError, or
// nil if none found.
func (m *LeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaderRequestMultiError(errors)
	}

	return nil
}

// LeaderRequestMultiError is an error wrapping multiple validation errors
// returned by LeaderRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaderRequestMultiError) AllErrors() []error { return m }

// LeaderRequestValidationError is the validation error returned by
// LeaderRequest.Validate if the designated constraints aren't met.
type LeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaderRequestValidationError) ErrorName() string { return "LeaderRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaderRequestValidationError{}

// Validate checks the field values on LeaderResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeaderResponseMultiError,
// or nil if none found.
func (m *LeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	if len(errors) > 0 {
		return LeaderResponseMultiError(errors)
	}

	return nil
}

// LeaderResponseMultiError is an error wrapping multiple validation errors
// returned by LeaderResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaderResponseMultiError) AllErrors() []error { return m }

// LeaderResponseValidationError is the validation error returned by
// LeaderResponse.Validate if the designated constraints aren't met.
type LeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaderResponseValidationError) ErrorName() string { return "LeaderResponseValidationError" }

// Error satisfies the builtin error interface
func (e LeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaderResponseValidationError{}

// Validate checks the field values on LeadershipTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeadershipTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeadershipTransferRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeadershipTransferRequestMultiError, or nil if none found.
func (m *LeadershipTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeadershipTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeadershipTransferRequestMultiError(errors)
	}

	return nil
}

// LeadershipTransferRequestMultiError is an error wrapping multiple validation
// errors returned by LeadershipTransferRequest.ValidateAll() if the
// designated constraints aren't met.
type LeadershipTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeadershipTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeadershipTransferRequestMultiError) AllErrors() []error { return m }

// LeadershipTransferRequestValidationError is the validation error returned by
// LeadershipTransferRequest.Validate if the designated constraints aren't met.
type LeadershipTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeadershipTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeadershipTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeadershipTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeadershipTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeadershipTransferRequestValidationError) ErrorName() string {
	return "LeadershipTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeadershipTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeadershipTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeadershipTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeadershipTransferRequestValidationError{}

// Validate checks the field values on LeadershipTransferToServerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LeadershipTransferToServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeadershipTransferToServerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LeadershipTransferToServerRequestMultiError, or nil if none found.
func (m *LeadershipTransferToServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeadershipTransferToServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	if len(errors) > 0 {
		return LeadershipTransferToServerRequestMultiError(errors)
	}

	return nil
}

// LeadershipTransferToServerRequestMultiError is an error wrapping multiple
// validation errors returned by
// LeadershipTransferToServerRequest.ValidateAll() if the designated
// constraints aren't met.
type LeadershipTransferToServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeadershipTransferToServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeadershipTransferToServerRequestMultiError) AllErrors() []error { return m }

// LeadershipTransferToServerRequestValidationError is the validation error
// returned by LeadershipTransferToServerRequest.Validate if the designated
// constraints aren't met.
type LeadershipTransferToServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeadershipTransferToServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeadershipTransferToServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeadershipTransferToServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeadershipTransferToServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeadershipTransferToServerRequestValidationError) ErrorName() string {
	return "LeadershipTransferToServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeadershipTransferToServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeadershipTransferToServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeadershipTransferToServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeadershipTransferToServerRequestValidationError{}

// Validate checks the field values on RemoveServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveServerRequestMultiError, or nil if none found.
func (m *RemoveServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PreviousIndex

	if len(errors) > 0 {
		return RemoveServerRequestMultiError(errors)
	}

	return nil
}

// RemoveServerRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveServerRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServerRequestMultiError) AllErrors() []error { return m }

// RemoveServerRequestValidationError is the validation error returned by
// RemoveServerRequest.Validate if the designated constraints aren't met.
type RemoveServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServerRequestValidationError) ErrorName() string {
	return "RemoveServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServerRequestValidationError{}

// Validate checks the field values on ShutdownRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShutdownRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownRequestMultiError, or nil if none found.
func (m *ShutdownRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownRequestMultiError(errors)
	}

	return nil
}

// ShutdownRequestMultiError is an error wrapping multiple validation errors
// returned by ShutdownRequest.ValidateAll() if the designated constraints
// aren't met.
type ShutdownRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownRequestMultiError) AllErrors() []error { return m }

// ShutdownRequestValidationError is the validation error returned by
// ShutdownRequest.Validate if the designated constraints aren't met.
type ShutdownRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownRequestValidationError) ErrorName() string { return "ShutdownRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShutdownRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownRequestValidationError{}

// Validate checks the field values on SnapshotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnapshotRequestMultiError, or nil if none found.
func (m *SnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SnapshotRequestMultiError(errors)
	}

	return nil
}

// SnapshotRequestMultiError is an error wrapping multiple validation errors
// returned by SnapshotRequest.ValidateAll() if the designated constraints
// aren't met.
type SnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnapshotRequestMultiError) AllErrors() []error { return m }

// SnapshotRequestValidationError is the validation error returned by
// SnapshotRequest.Validate if the designated constraints aren't met.
type SnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnapshotRequestValidationError) ErrorName() string { return "SnapshotRequestValidationError" }

// Error satisfies the builtin error interface
func (e SnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnapshotRequestValidationError{}

// Validate checks the field values on StateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StateRequestMultiError, or
// nil if none found.
func (m *StateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StateRequestMultiError(errors)
	}

	return nil
}

// StateRequestMultiError is an error wrapping multiple validation errors
// returned by StateRequest.ValidateAll() if the designated constraints aren't met.
type StateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateRequestMultiError) AllErrors() []error { return m }

// StateRequestValidationError is the validation error returned by
// StateRequest.Validate if the designated constraints aren't met.
type StateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateRequestValidationError) ErrorName() string { return "StateRequestValidationError" }

// Error satisfies the builtin error interface
func (e StateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateRequestValidationError{}

// Validate checks the field values on StateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StateResponseMultiError, or
// nil if none found.
func (m *StateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return StateResponseMultiError(errors)
	}

	return nil
}

// StateResponseMultiError is an error wrapping multiple validation errors
// returned by StateResponse.ValidateAll() if the designated constraints
// aren't met.
type StateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateResponseMultiError) AllErrors() []error { return m }

// StateResponseValidationError is the validation error returned by
// StateResponse.Validate if the designated constraints aren't met.
type StateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateResponseValidationError) ErrorName() string { return "StateResponseValidationError" }

// Error satisfies the builtin error interface
func (e StateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateResponseValidationError{}

// Validate checks the field values on VerifyLeaderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyLeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyLeaderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyLeaderRequestMultiError, or nil if none found.
func (m *VerifyLeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyLeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyLeaderRequestMultiError(errors)
	}

	return nil
}

// VerifyLeaderRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyLeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyLeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyLeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyLeaderRequestMultiError) AllErrors() []error { return m }

// VerifyLeaderRequestValidationError is the validation error returned by
// VerifyLeaderRequest.Validate if the designated constraints aren't met.
type VerifyLeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyLeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyLeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyLeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyLeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyLeaderRequestValidationError) ErrorName() string {
	return "VerifyLeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyLeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyLeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyLeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyLeaderRequestValidationError{}

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinRequestMultiError, or
// nil if none found.
func (m *JoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return JoinRequestMultiError(errors)
	}

	return nil
}

// JoinRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRequest.ValidateAll() if the designated constraints aren't met.
type JoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRequestMultiError) AllErrors() []error { return m }

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on GetConfigurationResponse_Server with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigurationResponse_Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationResponse_Server with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConfigurationResponse_ServerMultiError, or nil if none found.
func (m *GetConfigurationResponse_Server) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationResponse_Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Suffrage

	// no validation rules for Id

	// no validation rules for Address

	if len(errors) > 0 {
		return GetConfigurationResponse_ServerMultiError(errors)
	}

	return nil
}

// GetConfigurationResponse_ServerMultiError is an error wrapping multiple
// validation errors returned by GetConfigurationResponse_Server.ValidateAll()
// if the designated constraints aren't met.
type GetConfigurationResponse_ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationResponse_ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationResponse_ServerMultiError) AllErrors() []error { return m }

// GetConfigurationResponse_ServerValidationError is the validation error
// returned by GetConfigurationResponse_Server.Validate if the designated
// constraints aren't met.
type GetConfigurationResponse_ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationResponse_ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationResponse_ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationResponse_ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationResponse_ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationResponse_ServerValidationError) ErrorName() string {
	return "GetConfigurationResponse_ServerValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationResponse_ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationResponse_Server.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationResponse_ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationResponse_ServerValidationError{}
