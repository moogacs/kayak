// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/kayak/v1/kayak.proto

package kayakv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommitRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitRecordRequestMultiError, or nil if none found.
func (m *CommitRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for ConsumerId

	// no validation rules for Position

	if len(errors) > 0 {
		return CommitRecordRequestMultiError(errors)
	}

	return nil
}

// CommitRecordRequestMultiError is an error wrapping multiple validation
// errors returned by CommitRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type CommitRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitRecordRequestMultiError) AllErrors() []error { return m }

// CommitRecordRequestValidationError is the validation error returned by
// CommitRecordRequest.Validate if the designated constraints aren't met.
type CommitRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitRecordRequestValidationError) ErrorName() string {
	return "CommitRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommitRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitRecordRequestValidationError{}

// Validate checks the field values on PutRecordsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutRecordsRequestMultiError, or nil if none found.
func (m *PutRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PutRecordsRequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PutRecordsRequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PutRecordsRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IdempotencyKey

	if len(errors) > 0 {
		return PutRecordsRequestMultiError(errors)
	}

	return nil
}

// PutRecordsRequestMultiError is an error wrapping multiple validation errors
// returned by PutRecordsRequest.ValidateAll() if the designated constraints
// aren't met.
type PutRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRecordsRequestMultiError) AllErrors() []error { return m }

// PutRecordsRequestValidationError is the validation error returned by
// PutRecordsRequest.Validate if the designated constraints aren't met.
type PutRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRecordsRequestValidationError) ErrorName() string {
	return "PutRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRecordsRequestValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for Partition

	// no validation rules for Id

	// no validation rules for Headers

	// no validation rules for Payload

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on FetchRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchRecordRequestMultiError, or nil if none found.
func (m *FetchRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for ConsumerId

	// no validation rules for Position

	if len(errors) > 0 {
		return FetchRecordRequestMultiError(errors)
	}

	return nil
}

// FetchRecordRequestMultiError is an error wrapping multiple validation errors
// returned by FetchRecordRequest.ValidateAll() if the designated constraints
// aren't met.
type FetchRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchRecordRequestMultiError) AllErrors() []error { return m }

// FetchRecordRequestValidationError is the validation error returned by
// FetchRecordRequest.Validate if the designated constraints aren't met.
type FetchRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchRecordRequestValidationError) ErrorName() string {
	return "FetchRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchRecordRequestValidationError{}

// Validate checks the field values on FetchRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchRecordsResponseMultiError, or nil if none found.
func (m *FetchRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchRecordsResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchRecordsResponseValidationError{
					field:  "Record",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchRecordsResponseValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchRecordsResponseMultiError(errors)
	}

	return nil
}

// FetchRecordsResponseMultiError is an error wrapping multiple validation
// errors returned by FetchRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchRecordsResponseMultiError) AllErrors() []error { return m }

// FetchRecordsResponseValidationError is the validation error returned by
// FetchRecordsResponse.Validate if the designated constraints aren't met.
type FetchRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchRecordsResponseValidationError) ErrorName() string {
	return "FetchRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchRecordsResponseValidationError{}

// Validate checks the field values on GetRecordsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordsRequestMultiError, or nil if none found.
func (m *GetRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for Start

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetRecordsRequestMultiError(errors)
	}

	return nil
}

// GetRecordsRequestMultiError is an error wrapping multiple validation errors
// returned by GetRecordsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordsRequestMultiError) AllErrors() []error { return m }

// GetRecordsRequestValidationError is the validation error returned by
// GetRecordsRequest.Validate if the designated constraints aren't met.
type GetRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordsRequestValidationError) ErrorName() string {
	return "GetRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordsRequestValidationError{}

// Validate checks the field values on GetRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordsResponseMultiError, or nil if none found.
func (m *GetRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRecordsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRecordsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRecordsResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRecordsResponseMultiError(errors)
	}

	return nil
}

// GetRecordsResponseMultiError is an error wrapping multiple validation errors
// returned by GetRecordsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordsResponseMultiError) AllErrors() []error { return m }

// GetRecordsResponseValidationError is the validation error returned by
// GetRecordsResponse.Validate if the designated constraints aren't met.
type GetRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordsResponseValidationError) ErrorName() string {
	return "GetRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordsResponseValidationError{}

// Validate checks the field values on CreateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicRequestMultiError, or nil if none found.
func (m *CreateTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateTopicRequestMultiError(errors)
	}

	return nil
}

// CreateTopicRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicRequestMultiError) AllErrors() []error { return m }

// CreateTopicRequestValidationError is the validation error returned by
// CreateTopicRequest.Validate if the designated constraints aren't met.
type CreateTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicRequestValidationError) ErrorName() string {
	return "CreateTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicRequestValidationError{}

// Validate checks the field values on DeleteTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTopicRequestMultiError, or nil if none found.
func (m *DeleteTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return DeleteTopicRequestMultiError(errors)
	}

	return nil
}

// DeleteTopicRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTopicRequestMultiError) AllErrors() []error { return m }

// DeleteTopicRequestValidationError is the validation error returned by
// DeleteTopicRequest.Validate if the designated constraints aren't met.
type DeleteTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTopicRequestValidationError) ErrorName() string {
	return "DeleteTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTopicRequestValidationError{}

// Validate checks the field values on Topic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Topic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Topic with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TopicMultiError, or nil if none found.
func (m *Topic) ValidateAll() error {
	return m.validate(true)
}

func (m *Topic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Partitions

	if len(errors) > 0 {
		return TopicMultiError(errors)
	}

	return nil
}

// TopicMultiError is an error wrapping multiple validation errors returned by
// Topic.ValidateAll() if the designated constraints aren't met.
type TopicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicMultiError) AllErrors() []error { return m }

// TopicValidationError is the validation error returned by Topic.Validate if
// the designated constraints aren't met.
type TopicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicValidationError) ErrorName() string { return "TopicValidationError" }

// Error satisfies the builtin error interface
func (e TopicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicValidationError{}

// Validate checks the field values on ListTopicsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTopicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTopicsRequestMultiError, or nil if none found.
func (m *ListTopicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTopicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTopicsRequestMultiError(errors)
	}

	return nil
}

// ListTopicsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTopicsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTopicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTopicsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTopicsRequestMultiError) AllErrors() []error { return m }

// ListTopicsRequestValidationError is the validation error returned by
// ListTopicsRequest.Validate if the designated constraints aren't met.
type ListTopicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTopicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTopicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTopicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTopicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTopicsRequestValidationError) ErrorName() string {
	return "ListTopicsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTopicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTopicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTopicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTopicsRequestValidationError{}

// Validate checks the field values on ListTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTopicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTopicsResponseMultiError, or nil if none found.
func (m *ListTopicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTopicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTopicsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTopicsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTopicsResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTopicsResponseMultiError(errors)
	}

	return nil
}

// ListTopicsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTopicsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTopicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTopicsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTopicsResponseMultiError) AllErrors() []error { return m }

// ListTopicsResponseValidationError is the validation error returned by
// ListTopicsResponse.Validate if the designated constraints aren't met.
type ListTopicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTopicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTopicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTopicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTopicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTopicsResponseValidationError) ErrorName() string {
	return "ListTopicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTopicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTopicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTopicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTopicsResponseValidationError{}

// Validate checks the field values on StatsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatsResponseMultiError, or
// nil if none found.
func (m *StatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Raft

	{
		sorted_keys := make([]string, len(m.GetStore()))
		i := 0
		for key := range m.GetStore() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStore()[key]
			_ = val

			// no validation rules for Store[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StatsResponseValidationError{
							field:  fmt.Sprintf("Store[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StatsResponseValidationError{
							field:  fmt.Sprintf("Store[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StatsResponseValidationError{
						field:  fmt.Sprintf("Store[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return StatsResponseMultiError(errors)
	}

	return nil
}

// StatsResponseMultiError is an error wrapping multiple validation errors
// returned by StatsResponse.ValidateAll() if the designated constraints
// aren't met.
type StatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatsResponseMultiError) AllErrors() []error { return m }

// StatsResponseValidationError is the validation error returned by
// StatsResponse.Validate if the designated constraints aren't met.
type StatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsResponseValidationError) ErrorName() string { return "StatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsResponseValidationError{}

// Validate checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Command) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommandMultiError, or nil if none found.
func (m *Command) ValidateAll() error {
	return m.validate(true)
}

func (m *Command) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Payload.(type) {
	case *Command_PutRecordsRequest:
		if v == nil {
			err := CommandValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPutRecordsRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "PutRecordsRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "PutRecordsRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPutRecordsRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "PutRecordsRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_CreateTopicRequest:
		if v == nil {
			err := CommandValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateTopicRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CreateTopicRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CreateTopicRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTopicRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "CreateTopicRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_CommitRecordRequest:
		if v == nil {
			err := CommandValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCommitRecordRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CommitRecordRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CommitRecordRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommitRecordRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "CommitRecordRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_DeleteTopicRequest:
		if v == nil {
			err := CommandValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeleteTopicRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "DeleteTopicRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "DeleteTopicRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteTopicRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "DeleteTopicRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CommandMultiError(errors)
	}

	return nil
}

// CommandMultiError is an error wrapping multiple validation errors returned
// by Command.ValidateAll() if the designated constraints aren't met.
type CommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandMultiError) AllErrors() []error { return m }

// CommandValidationError is the validation error returned by Command.Validate
// if the designated constraints aren't met.
type CommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandValidationError) ErrorName() string { return "CommandValidationError" }

// Error satisfies the builtin error interface
func (e CommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandValidationError{}

// Validate checks the field values on GetNodeDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeDetailsResponseMultiError, or nil if none found.
func (m *GetNodeDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Port

	if len(errors) > 0 {
		return GetNodeDetailsResponseMultiError(errors)
	}

	return nil
}

// GetNodeDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by GetNodeDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNodeDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeDetailsResponseMultiError) AllErrors() []error { return m }

// GetNodeDetailsResponseValidationError is the validation error returned by
// GetNodeDetailsResponse.Validate if the designated constraints aren't met.
type GetNodeDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeDetailsResponseValidationError) ErrorName() string {
	return "GetNodeDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeDetailsResponseValidationError{}

// Validate checks the field values on KVItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KVItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KVItemMultiError, or nil if none found.
func (m *KVItem) ValidateAll() error {
	return m.validate(true)
}

func (m *KVItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Bucket

	if len(errors) > 0 {
		return KVItemMultiError(errors)
	}

	return nil
}

// KVItemMultiError is an error wrapping multiple validation errors returned by
// KVItem.ValidateAll() if the designated constraints aren't met.
type KVItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVItemMultiError) AllErrors() []error { return m }

// KVItemValidationError is the validation error returned by KVItem.Validate if
// the designated constraints aren't met.
type KVItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVItemValidationError) ErrorName() string { return "KVItemValidationError" }

// Error satisfies the builtin error interface
func (e KVItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVItemValidationError{}

// Validate checks the field values on StreamRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamRecordsRequestMultiError, or nil if none found.
func (m *StreamRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for Position

	// no validation rules for BatchSize

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamRecordsRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamRecordsRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamRecordsRequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamRecordsRequestMultiError(errors)
	}

	return nil
}

// StreamRecordsRequestMultiError is an error wrapping multiple validation
// errors returned by StreamRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRecordsRequestMultiError) AllErrors() []error { return m }

// StreamRecordsRequestValidationError is the validation error returned by
// StreamRecordsRequest.Validate if the designated constraints aren't met.
type StreamRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRecordsRequestValidationError) ErrorName() string {
	return "StreamRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRecordsRequestValidationError{}

// Validate checks the field values on TopicMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopicMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopicMetadataMultiError, or
// nil if none found.
func (m *TopicMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for RecordCount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopicMetadataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopicMetadataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopicMetadataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Archived

	// no validation rules for Consumers

	if len(errors) > 0 {
		return TopicMetadataMultiError(errors)
	}

	return nil
}

// TopicMetadataMultiError is an error wrapping multiple validation errors
// returned by TopicMetadata.ValidateAll() if the designated constraints
// aren't met.
type TopicMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicMetadataMultiError) AllErrors() []error { return m }

// TopicMetadataValidationError is the validation error returned by
// TopicMetadata.Validate if the designated constraints aren't met.
type TopicMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicMetadataValidationError) ErrorName() string { return "TopicMetadataValidationError" }

// Error satisfies the builtin error interface
func (e TopicMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicMetadataValidationError{}
