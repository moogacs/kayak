// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/admin/v1/admin.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kayak/gen/proto/admin/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "proto.admin.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceAddNonvoterProcedure is the fully-qualified name of the AdminService's AddNonvoter
	// RPC.
	AdminServiceAddNonvoterProcedure = "/proto.admin.v1.AdminService/AddNonvoter"
	// AdminServiceAddVoterProcedure is the fully-qualified name of the AdminService's AddVoter RPC.
	AdminServiceAddVoterProcedure = "/proto.admin.v1.AdminService/AddVoter"
	// AdminServiceAppliedIndexProcedure is the fully-qualified name of the AdminService's AppliedIndex
	// RPC.
	AdminServiceAppliedIndexProcedure = "/proto.admin.v1.AdminService/AppliedIndex"
	// AdminServiceDemoteVoterProcedure is the fully-qualified name of the AdminService's DemoteVoter
	// RPC.
	AdminServiceDemoteVoterProcedure = "/proto.admin.v1.AdminService/DemoteVoter"
	// AdminServiceGetConfigurationProcedure is the fully-qualified name of the AdminService's
	// GetConfiguration RPC.
	AdminServiceGetConfigurationProcedure = "/proto.admin.v1.AdminService/GetConfiguration"
	// AdminServiceLastContactProcedure is the fully-qualified name of the AdminService's LastContact
	// RPC.
	AdminServiceLastContactProcedure = "/proto.admin.v1.AdminService/LastContact"
	// AdminServiceLastIndexProcedure is the fully-qualified name of the AdminService's LastIndex RPC.
	AdminServiceLastIndexProcedure = "/proto.admin.v1.AdminService/LastIndex"
	// AdminServiceLeaderProcedure is the fully-qualified name of the AdminService's Leader RPC.
	AdminServiceLeaderProcedure = "/proto.admin.v1.AdminService/Leader"
	// AdminServiceLeadershipTransferProcedure is the fully-qualified name of the AdminService's
	// LeadershipTransfer RPC.
	AdminServiceLeadershipTransferProcedure = "/proto.admin.v1.AdminService/LeadershipTransfer"
	// AdminServiceLeadershipTransferToServerProcedure is the fully-qualified name of the AdminService's
	// LeadershipTransferToServer RPC.
	AdminServiceLeadershipTransferToServerProcedure = "/proto.admin.v1.AdminService/LeadershipTransferToServer"
	// AdminServiceRemoveServerProcedure is the fully-qualified name of the AdminService's RemoveServer
	// RPC.
	AdminServiceRemoveServerProcedure = "/proto.admin.v1.AdminService/RemoveServer"
	// AdminServiceShutdownProcedure is the fully-qualified name of the AdminService's Shutdown RPC.
	AdminServiceShutdownProcedure = "/proto.admin.v1.AdminService/Shutdown"
	// AdminServiceSnapshotProcedure is the fully-qualified name of the AdminService's Snapshot RPC.
	AdminServiceSnapshotProcedure = "/proto.admin.v1.AdminService/Snapshot"
	// AdminServiceStateProcedure is the fully-qualified name of the AdminService's State RPC.
	AdminServiceStateProcedure = "/proto.admin.v1.AdminService/State"
	// AdminServiceVerifyLeaderProcedure is the fully-qualified name of the AdminService's VerifyLeader
	// RPC.
	AdminServiceVerifyLeaderProcedure = "/proto.admin.v1.AdminService/VerifyLeader"
	// AdminServiceJoinProcedure is the fully-qualified name of the AdminService's Join RPC.
	AdminServiceJoinProcedure = "/proto.admin.v1.AdminService/Join"
	// AdminServiceAwaitProcedure is the fully-qualified name of the AdminService's Await RPC.
	AdminServiceAwaitProcedure = "/proto.admin.v1.AdminService/Await"
	// AdminServiceForgetProcedure is the fully-qualified name of the AdminService's Forget RPC.
	AdminServiceForgetProcedure = "/proto.admin.v1.AdminService/Forget"
)

// AdminServiceClient is a client for the proto.admin.v1.AdminService service.
type AdminServiceClient interface {
	AddNonvoter(context.Context, *connect.Request[v1.AddNonvoterRequest]) (*connect.Response[v1.Future], error)
	AddVoter(context.Context, *connect.Request[v1.AddVoterRequest]) (*connect.Response[v1.Future], error)
	AppliedIndex(context.Context, *connect.Request[v1.AppliedIndexRequest]) (*connect.Response[v1.AppliedIndexResponse], error)
	DemoteVoter(context.Context, *connect.Request[v1.DemoteVoterRequest]) (*connect.Response[v1.Future], error)
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	LastContact(context.Context, *connect.Request[v1.LastContactRequest]) (*connect.Response[v1.LastContactResponse], error)
	LastIndex(context.Context, *connect.Request[v1.LastIndexRequest]) (*connect.Response[v1.LastIndexResponse], error)
	Leader(context.Context, *connect.Request[v1.LeaderRequest]) (*connect.Response[v1.LeaderResponse], error)
	LeadershipTransfer(context.Context, *connect.Request[v1.LeadershipTransferRequest]) (*connect.Response[v1.Future], error)
	LeadershipTransferToServer(context.Context, *connect.Request[v1.LeadershipTransferToServerRequest]) (*connect.Response[v1.Future], error)
	RemoveServer(context.Context, *connect.Request[v1.RemoveServerRequest]) (*connect.Response[v1.Future], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.Future], error)
	Snapshot(context.Context, *connect.Request[v1.SnapshotRequest]) (*connect.Response[v1.Future], error)
	State(context.Context, *connect.Request[v1.StateRequest]) (*connect.Response[v1.StateResponse], error)
	VerifyLeader(context.Context, *connect.Request[v1.VerifyLeaderRequest]) (*connect.Response[v1.Future], error)
	Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[emptypb.Empty], error)
	Await(context.Context, *connect.Request[v1.Future]) (*connect.Response[v1.AwaitResponse], error)
	Forget(context.Context, *connect.Request[v1.Future]) (*connect.Response[v1.ForgetResponse], error)
}

// NewAdminServiceClient constructs a client for the proto.admin.v1.AdminService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		addNonvoter: connect.NewClient[v1.AddNonvoterRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceAddNonvoterProcedure,
			opts...,
		),
		addVoter: connect.NewClient[v1.AddVoterRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceAddVoterProcedure,
			opts...,
		),
		appliedIndex: connect.NewClient[v1.AppliedIndexRequest, v1.AppliedIndexResponse](
			httpClient,
			baseURL+AdminServiceAppliedIndexProcedure,
			opts...,
		),
		demoteVoter: connect.NewClient[v1.DemoteVoterRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceDemoteVoterProcedure,
			opts...,
		),
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.GetConfigurationResponse](
			httpClient,
			baseURL+AdminServiceGetConfigurationProcedure,
			opts...,
		),
		lastContact: connect.NewClient[v1.LastContactRequest, v1.LastContactResponse](
			httpClient,
			baseURL+AdminServiceLastContactProcedure,
			opts...,
		),
		lastIndex: connect.NewClient[v1.LastIndexRequest, v1.LastIndexResponse](
			httpClient,
			baseURL+AdminServiceLastIndexProcedure,
			opts...,
		),
		leader: connect.NewClient[v1.LeaderRequest, v1.LeaderResponse](
			httpClient,
			baseURL+AdminServiceLeaderProcedure,
			opts...,
		),
		leadershipTransfer: connect.NewClient[v1.LeadershipTransferRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceLeadershipTransferProcedure,
			opts...,
		),
		leadershipTransferToServer: connect.NewClient[v1.LeadershipTransferToServerRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceLeadershipTransferToServerProcedure,
			opts...,
		),
		removeServer: connect.NewClient[v1.RemoveServerRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceRemoveServerProcedure,
			opts...,
		),
		shutdown: connect.NewClient[v1.ShutdownRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceShutdownProcedure,
			opts...,
		),
		snapshot: connect.NewClient[v1.SnapshotRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceSnapshotProcedure,
			opts...,
		),
		state: connect.NewClient[v1.StateRequest, v1.StateResponse](
			httpClient,
			baseURL+AdminServiceStateProcedure,
			opts...,
		),
		verifyLeader: connect.NewClient[v1.VerifyLeaderRequest, v1.Future](
			httpClient,
			baseURL+AdminServiceVerifyLeaderProcedure,
			opts...,
		),
		join: connect.NewClient[v1.JoinRequest, emptypb.Empty](
			httpClient,
			baseURL+AdminServiceJoinProcedure,
			opts...,
		),
		await: connect.NewClient[v1.Future, v1.AwaitResponse](
			httpClient,
			baseURL+AdminServiceAwaitProcedure,
			opts...,
		),
		forget: connect.NewClient[v1.Future, v1.ForgetResponse](
			httpClient,
			baseURL+AdminServiceForgetProcedure,
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	addNonvoter                *connect.Client[v1.AddNonvoterRequest, v1.Future]
	addVoter                   *connect.Client[v1.AddVoterRequest, v1.Future]
	appliedIndex               *connect.Client[v1.AppliedIndexRequest, v1.AppliedIndexResponse]
	demoteVoter                *connect.Client[v1.DemoteVoterRequest, v1.Future]
	getConfiguration           *connect.Client[v1.GetConfigurationRequest, v1.GetConfigurationResponse]
	lastContact                *connect.Client[v1.LastContactRequest, v1.LastContactResponse]
	lastIndex                  *connect.Client[v1.LastIndexRequest, v1.LastIndexResponse]
	leader                     *connect.Client[v1.LeaderRequest, v1.LeaderResponse]
	leadershipTransfer         *connect.Client[v1.LeadershipTransferRequest, v1.Future]
	leadershipTransferToServer *connect.Client[v1.LeadershipTransferToServerRequest, v1.Future]
	removeServer               *connect.Client[v1.RemoveServerRequest, v1.Future]
	shutdown                   *connect.Client[v1.ShutdownRequest, v1.Future]
	snapshot                   *connect.Client[v1.SnapshotRequest, v1.Future]
	state                      *connect.Client[v1.StateRequest, v1.StateResponse]
	verifyLeader               *connect.Client[v1.VerifyLeaderRequest, v1.Future]
	join                       *connect.Client[v1.JoinRequest, emptypb.Empty]
	await                      *connect.Client[v1.Future, v1.AwaitResponse]
	forget                     *connect.Client[v1.Future, v1.ForgetResponse]
}

// AddNonvoter calls proto.admin.v1.AdminService.AddNonvoter.
func (c *adminServiceClient) AddNonvoter(ctx context.Context, req *connect.Request[v1.AddNonvoterRequest]) (*connect.Response[v1.Future], error) {
	return c.addNonvoter.CallUnary(ctx, req)
}

// AddVoter calls proto.admin.v1.AdminService.AddVoter.
func (c *adminServiceClient) AddVoter(ctx context.Context, req *connect.Request[v1.AddVoterRequest]) (*connect.Response[v1.Future], error) {
	return c.addVoter.CallUnary(ctx, req)
}

// AppliedIndex calls proto.admin.v1.AdminService.AppliedIndex.
func (c *adminServiceClient) AppliedIndex(ctx context.Context, req *connect.Request[v1.AppliedIndexRequest]) (*connect.Response[v1.AppliedIndexResponse], error) {
	return c.appliedIndex.CallUnary(ctx, req)
}

// DemoteVoter calls proto.admin.v1.AdminService.DemoteVoter.
func (c *adminServiceClient) DemoteVoter(ctx context.Context, req *connect.Request[v1.DemoteVoterRequest]) (*connect.Response[v1.Future], error) {
	return c.demoteVoter.CallUnary(ctx, req)
}

// GetConfiguration calls proto.admin.v1.AdminService.GetConfiguration.
func (c *adminServiceClient) GetConfiguration(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// LastContact calls proto.admin.v1.AdminService.LastContact.
func (c *adminServiceClient) LastContact(ctx context.Context, req *connect.Request[v1.LastContactRequest]) (*connect.Response[v1.LastContactResponse], error) {
	return c.lastContact.CallUnary(ctx, req)
}

// LastIndex calls proto.admin.v1.AdminService.LastIndex.
func (c *adminServiceClient) LastIndex(ctx context.Context, req *connect.Request[v1.LastIndexRequest]) (*connect.Response[v1.LastIndexResponse], error) {
	return c.lastIndex.CallUnary(ctx, req)
}

// Leader calls proto.admin.v1.AdminService.Leader.
func (c *adminServiceClient) Leader(ctx context.Context, req *connect.Request[v1.LeaderRequest]) (*connect.Response[v1.LeaderResponse], error) {
	return c.leader.CallUnary(ctx, req)
}

// LeadershipTransfer calls proto.admin.v1.AdminService.LeadershipTransfer.
func (c *adminServiceClient) LeadershipTransfer(ctx context.Context, req *connect.Request[v1.LeadershipTransferRequest]) (*connect.Response[v1.Future], error) {
	return c.leadershipTransfer.CallUnary(ctx, req)
}

// LeadershipTransferToServer calls proto.admin.v1.AdminService.LeadershipTransferToServer.
func (c *adminServiceClient) LeadershipTransferToServer(ctx context.Context, req *connect.Request[v1.LeadershipTransferToServerRequest]) (*connect.Response[v1.Future], error) {
	return c.leadershipTransferToServer.CallUnary(ctx, req)
}

// RemoveServer calls proto.admin.v1.AdminService.RemoveServer.
func (c *adminServiceClient) RemoveServer(ctx context.Context, req *connect.Request[v1.RemoveServerRequest]) (*connect.Response[v1.Future], error) {
	return c.removeServer.CallUnary(ctx, req)
}

// Shutdown calls proto.admin.v1.AdminService.Shutdown.
func (c *adminServiceClient) Shutdown(ctx context.Context, req *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.Future], error) {
	return c.shutdown.CallUnary(ctx, req)
}

// Snapshot calls proto.admin.v1.AdminService.Snapshot.
func (c *adminServiceClient) Snapshot(ctx context.Context, req *connect.Request[v1.SnapshotRequest]) (*connect.Response[v1.Future], error) {
	return c.snapshot.CallUnary(ctx, req)
}

// State calls proto.admin.v1.AdminService.State.
func (c *adminServiceClient) State(ctx context.Context, req *connect.Request[v1.StateRequest]) (*connect.Response[v1.StateResponse], error) {
	return c.state.CallUnary(ctx, req)
}

// VerifyLeader calls proto.admin.v1.AdminService.VerifyLeader.
func (c *adminServiceClient) VerifyLeader(ctx context.Context, req *connect.Request[v1.VerifyLeaderRequest]) (*connect.Response[v1.Future], error) {
	return c.verifyLeader.CallUnary(ctx, req)
}

// Join calls proto.admin.v1.AdminService.Join.
func (c *adminServiceClient) Join(ctx context.Context, req *connect.Request[v1.JoinRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.join.CallUnary(ctx, req)
}

// Await calls proto.admin.v1.AdminService.Await.
func (c *adminServiceClient) Await(ctx context.Context, req *connect.Request[v1.Future]) (*connect.Response[v1.AwaitResponse], error) {
	return c.await.CallUnary(ctx, req)
}

// Forget calls proto.admin.v1.AdminService.Forget.
func (c *adminServiceClient) Forget(ctx context.Context, req *connect.Request[v1.Future]) (*connect.Response[v1.ForgetResponse], error) {
	return c.forget.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the proto.admin.v1.AdminService service.
type AdminServiceHandler interface {
	AddNonvoter(context.Context, *connect.Request[v1.AddNonvoterRequest]) (*connect.Response[v1.Future], error)
	AddVoter(context.Context, *connect.Request[v1.AddVoterRequest]) (*connect.Response[v1.Future], error)
	AppliedIndex(context.Context, *connect.Request[v1.AppliedIndexRequest]) (*connect.Response[v1.AppliedIndexResponse], error)
	DemoteVoter(context.Context, *connect.Request[v1.DemoteVoterRequest]) (*connect.Response[v1.Future], error)
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	LastContact(context.Context, *connect.Request[v1.LastContactRequest]) (*connect.Response[v1.LastContactResponse], error)
	LastIndex(context.Context, *connect.Request[v1.LastIndexRequest]) (*connect.Response[v1.LastIndexResponse], error)
	Leader(context.Context, *connect.Request[v1.LeaderRequest]) (*connect.Response[v1.LeaderResponse], error)
	LeadershipTransfer(context.Context, *connect.Request[v1.LeadershipTransferRequest]) (*connect.Response[v1.Future], error)
	LeadershipTransferToServer(context.Context, *connect.Request[v1.LeadershipTransferToServerRequest]) (*connect.Response[v1.Future], error)
	RemoveServer(context.Context, *connect.Request[v1.RemoveServerRequest]) (*connect.Response[v1.Future], error)
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.Future], error)
	Snapshot(context.Context, *connect.Request[v1.SnapshotRequest]) (*connect.Response[v1.Future], error)
	State(context.Context, *connect.Request[v1.StateRequest]) (*connect.Response[v1.StateResponse], error)
	VerifyLeader(context.Context, *connect.Request[v1.VerifyLeaderRequest]) (*connect.Response[v1.Future], error)
	Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[emptypb.Empty], error)
	Await(context.Context, *connect.Request[v1.Future]) (*connect.Response[v1.AwaitResponse], error)
	Forget(context.Context, *connect.Request[v1.Future]) (*connect.Response[v1.ForgetResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceAddNonvoterHandler := connect.NewUnaryHandler(
		AdminServiceAddNonvoterProcedure,
		svc.AddNonvoter,
		opts...,
	)
	adminServiceAddVoterHandler := connect.NewUnaryHandler(
		AdminServiceAddVoterProcedure,
		svc.AddVoter,
		opts...,
	)
	adminServiceAppliedIndexHandler := connect.NewUnaryHandler(
		AdminServiceAppliedIndexProcedure,
		svc.AppliedIndex,
		opts...,
	)
	adminServiceDemoteVoterHandler := connect.NewUnaryHandler(
		AdminServiceDemoteVoterProcedure,
		svc.DemoteVoter,
		opts...,
	)
	adminServiceGetConfigurationHandler := connect.NewUnaryHandler(
		AdminServiceGetConfigurationProcedure,
		svc.GetConfiguration,
		opts...,
	)
	adminServiceLastContactHandler := connect.NewUnaryHandler(
		AdminServiceLastContactProcedure,
		svc.LastContact,
		opts...,
	)
	adminServiceLastIndexHandler := connect.NewUnaryHandler(
		AdminServiceLastIndexProcedure,
		svc.LastIndex,
		opts...,
	)
	adminServiceLeaderHandler := connect.NewUnaryHandler(
		AdminServiceLeaderProcedure,
		svc.Leader,
		opts...,
	)
	adminServiceLeadershipTransferHandler := connect.NewUnaryHandler(
		AdminServiceLeadershipTransferProcedure,
		svc.LeadershipTransfer,
		opts...,
	)
	adminServiceLeadershipTransferToServerHandler := connect.NewUnaryHandler(
		AdminServiceLeadershipTransferToServerProcedure,
		svc.LeadershipTransferToServer,
		opts...,
	)
	adminServiceRemoveServerHandler := connect.NewUnaryHandler(
		AdminServiceRemoveServerProcedure,
		svc.RemoveServer,
		opts...,
	)
	adminServiceShutdownHandler := connect.NewUnaryHandler(
		AdminServiceShutdownProcedure,
		svc.Shutdown,
		opts...,
	)
	adminServiceSnapshotHandler := connect.NewUnaryHandler(
		AdminServiceSnapshotProcedure,
		svc.Snapshot,
		opts...,
	)
	adminServiceStateHandler := connect.NewUnaryHandler(
		AdminServiceStateProcedure,
		svc.State,
		opts...,
	)
	adminServiceVerifyLeaderHandler := connect.NewUnaryHandler(
		AdminServiceVerifyLeaderProcedure,
		svc.VerifyLeader,
		opts...,
	)
	adminServiceJoinHandler := connect.NewUnaryHandler(
		AdminServiceJoinProcedure,
		svc.Join,
		opts...,
	)
	adminServiceAwaitHandler := connect.NewUnaryHandler(
		AdminServiceAwaitProcedure,
		svc.Await,
		opts...,
	)
	adminServiceForgetHandler := connect.NewUnaryHandler(
		AdminServiceForgetProcedure,
		svc.Forget,
		opts...,
	)
	return "/proto.admin.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceAddNonvoterProcedure:
			adminServiceAddNonvoterHandler.ServeHTTP(w, r)
		case AdminServiceAddVoterProcedure:
			adminServiceAddVoterHandler.ServeHTTP(w, r)
		case AdminServiceAppliedIndexProcedure:
			adminServiceAppliedIndexHandler.ServeHTTP(w, r)
		case AdminServiceDemoteVoterProcedure:
			adminServiceDemoteVoterHandler.ServeHTTP(w, r)
		case AdminServiceGetConfigurationProcedure:
			adminServiceGetConfigurationHandler.ServeHTTP(w, r)
		case AdminServiceLastContactProcedure:
			adminServiceLastContactHandler.ServeHTTP(w, r)
		case AdminServiceLastIndexProcedure:
			adminServiceLastIndexHandler.ServeHTTP(w, r)
		case AdminServiceLeaderProcedure:
			adminServiceLeaderHandler.ServeHTTP(w, r)
		case AdminServiceLeadershipTransferProcedure:
			adminServiceLeadershipTransferHandler.ServeHTTP(w, r)
		case AdminServiceLeadershipTransferToServerProcedure:
			adminServiceLeadershipTransferToServerHandler.ServeHTTP(w, r)
		case AdminServiceRemoveServerProcedure:
			adminServiceRemoveServerHandler.ServeHTTP(w, r)
		case AdminServiceShutdownProcedure:
			adminServiceShutdownHandler.ServeHTTP(w, r)
		case AdminServiceSnapshotProcedure:
			adminServiceSnapshotHandler.ServeHTTP(w, r)
		case AdminServiceStateProcedure:
			adminServiceStateHandler.ServeHTTP(w, r)
		case AdminServiceVerifyLeaderProcedure:
			adminServiceVerifyLeaderHandler.ServeHTTP(w, r)
		case AdminServiceJoinProcedure:
			adminServiceJoinHandler.ServeHTTP(w, r)
		case AdminServiceAwaitProcedure:
			adminServiceAwaitHandler.ServeHTTP(w, r)
		case AdminServiceForgetProcedure:
			adminServiceForgetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) AddNonvoter(context.Context, *connect.Request[v1.AddNonvoterRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.AddNonvoter is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddVoter(context.Context, *connect.Request[v1.AddVoterRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.AddVoter is not implemented"))
}

func (UnimplementedAdminServiceHandler) AppliedIndex(context.Context, *connect.Request[v1.AppliedIndexRequest]) (*connect.Response[v1.AppliedIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.AppliedIndex is not implemented"))
}

func (UnimplementedAdminServiceHandler) DemoteVoter(context.Context, *connect.Request[v1.DemoteVoterRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.DemoteVoter is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.GetConfiguration is not implemented"))
}

func (UnimplementedAdminServiceHandler) LastContact(context.Context, *connect.Request[v1.LastContactRequest]) (*connect.Response[v1.LastContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.LastContact is not implemented"))
}

func (UnimplementedAdminServiceHandler) LastIndex(context.Context, *connect.Request[v1.LastIndexRequest]) (*connect.Response[v1.LastIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.LastIndex is not implemented"))
}

func (UnimplementedAdminServiceHandler) Leader(context.Context, *connect.Request[v1.LeaderRequest]) (*connect.Response[v1.LeaderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.Leader is not implemented"))
}

func (UnimplementedAdminServiceHandler) LeadershipTransfer(context.Context, *connect.Request[v1.LeadershipTransferRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.LeadershipTransfer is not implemented"))
}

func (UnimplementedAdminServiceHandler) LeadershipTransferToServer(context.Context, *connect.Request[v1.LeadershipTransferToServerRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.LeadershipTransferToServer is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveServer(context.Context, *connect.Request[v1.RemoveServerRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.RemoveServer is not implemented"))
}

func (UnimplementedAdminServiceHandler) Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.Shutdown is not implemented"))
}

func (UnimplementedAdminServiceHandler) Snapshot(context.Context, *connect.Request[v1.SnapshotRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.Snapshot is not implemented"))
}

func (UnimplementedAdminServiceHandler) State(context.Context, *connect.Request[v1.StateRequest]) (*connect.Response[v1.StateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.State is not implemented"))
}

func (UnimplementedAdminServiceHandler) VerifyLeader(context.Context, *connect.Request[v1.VerifyLeaderRequest]) (*connect.Response[v1.Future], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.VerifyLeader is not implemented"))
}

func (UnimplementedAdminServiceHandler) Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.Join is not implemented"))
}

func (UnimplementedAdminServiceHandler) Await(context.Context, *connect.Request[v1.Future]) (*connect.Response[v1.AwaitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.Await is not implemented"))
}

func (UnimplementedAdminServiceHandler) Forget(context.Context, *connect.Request[v1.Future]) (*connect.Response[v1.ForgetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.admin.v1.AdminService.Forget is not implemented"))
}
